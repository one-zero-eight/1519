/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PatronIndexRouteImport } from './routes/patron/index'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as ApplicantIndexRouteImport } from './routes/applicant/index'
import { Route as PatronRankingRouteImport } from './routes/patron/ranking'
import { Route as PatronAdminRankingRouteImport } from './routes/patron/admin-ranking'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PatronIndexRoute = PatronIndexRouteImport.update({
  id: '/patron/',
  path: '/patron/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApplicantIndexRoute = ApplicantIndexRouteImport.update({
  id: '/applicant/',
  path: '/applicant/',
  getParentRoute: () => rootRouteImport,
} as any)
const PatronRankingRoute = PatronRankingRouteImport.update({
  id: '/patron/ranking',
  path: '/patron/ranking',
  getParentRoute: () => rootRouteImport,
} as any)
const PatronAdminRankingRoute = PatronAdminRankingRouteImport.update({
  id: '/patron/admin-ranking',
  path: '/patron/admin-ranking',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/patron/admin-ranking': typeof PatronAdminRankingRoute
  '/patron/ranking': typeof PatronRankingRoute
  '/applicant': typeof ApplicantIndexRoute
  '/auth': typeof AuthIndexRoute
  '/patron': typeof PatronIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/patron/admin-ranking': typeof PatronAdminRankingRoute
  '/patron/ranking': typeof PatronRankingRoute
  '/applicant': typeof ApplicantIndexRoute
  '/auth': typeof AuthIndexRoute
  '/patron': typeof PatronIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/patron/admin-ranking': typeof PatronAdminRankingRoute
  '/patron/ranking': typeof PatronRankingRoute
  '/applicant/': typeof ApplicantIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/patron/': typeof PatronIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/patron/admin-ranking'
    | '/patron/ranking'
    | '/applicant'
    | '/auth'
    | '/patron'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/patron/admin-ranking'
    | '/patron/ranking'
    | '/applicant'
    | '/auth'
    | '/patron'
  id:
    | '__root__'
    | '/'
    | '/patron/admin-ranking'
    | '/patron/ranking'
    | '/applicant/'
    | '/auth/'
    | '/patron/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PatronAdminRankingRoute: typeof PatronAdminRankingRoute
  PatronRankingRoute: typeof PatronRankingRoute
  ApplicantIndexRoute: typeof ApplicantIndexRoute
  AuthIndexRoute: typeof AuthIndexRoute
  PatronIndexRoute: typeof PatronIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/patron/': {
      id: '/patron/'
      path: '/patron'
      fullPath: '/patron'
      preLoaderRoute: typeof PatronIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/applicant/': {
      id: '/applicant/'
      path: '/applicant'
      fullPath: '/applicant'
      preLoaderRoute: typeof ApplicantIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/patron/ranking': {
      id: '/patron/ranking'
      path: '/patron/ranking'
      fullPath: '/patron/ranking'
      preLoaderRoute: typeof PatronRankingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/patron/admin-ranking': {
      id: '/patron/admin-ranking'
      path: '/patron/admin-ranking'
      fullPath: '/patron/admin-ranking'
      preLoaderRoute: typeof PatronAdminRankingRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PatronAdminRankingRoute: PatronAdminRankingRoute,
  PatronRankingRoute: PatronRankingRoute,
  ApplicantIndexRoute: ApplicantIndexRoute,
  AuthIndexRoute: AuthIndexRoute,
  PatronIndexRoute: PatronIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
