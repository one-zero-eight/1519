name: Build and deploy

on:
  # Allow manual trigger of the workflow
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to deploy to
        type: environment
        required: true
  # Verify build on any push; deploy only on main branch
  push:
  # Verify build in pull requests
  pull_request:

env:
  # Use GitHub Container Registry
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  frontend-build:
    name: "[Frontend] Build static files"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure environment variables
        run: echo "${{ vars.FRONTEND_ENV_VARIABLES }}" > .env.local
        working-directory: frontend

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        working-directory: frontend

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
        working-directory: frontend

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
        working-directory: frontend

      - name: Build
        run: pnpm run build
        working-directory: frontend

      - name: List files
        run: |
          # Save the list of files as a GitHub Actions step summary
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -lAhR ./dist 2>&1 | tee -a $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        working-directory: frontend

      - uses: actions/upload-artifact@v4
        with:
          name: static-files
          path: dist/
          if-no-files-found: error
        working-directory: frontend

  frontend-deploy:
    if: github.repository_owner == 'one-zero-eight' && (github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    name: "[Frontend] Deploy to ${{ github.event.inputs.environment || 'staging' }}"
    needs: frontend-build
    runs-on: [self-hosted, innohassle]
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: ${{ vars.FRONTEND_DEPLOY_URL }}
    concurrency:
      group: ${{ github.event.inputs.environment || 'staging' }}
      cancel-in-progress: false
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: static-files
          path: dist

      - name: Copy files via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.FRONTEND_SSH_HOST }}
          username: ${{ secrets.FRONTEND_SSH_USERNAME }}
          key: ${{ secrets.FRONTEND_SSH_KEY }}
          fingerprint: ${{ secrets.FRONTEND_SSH_FINGERPRINT }}
          source: "./dist/*"
          target: ${{ secrets.FRONTEND_SSH_TARGET_DIR }}
          strip_components: 1
          overwrite: true
          rm: true

  backend-build:
    name: "[Backend] Build Docker image"
    runs-on: ubuntu-latest
    permissions: # Permissions granted to the 'GITHUB_TOKEN'
      contents: read
      packages: write
    outputs:
      imageid: ${{ steps.build.outputs.imageid }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        working-directory: backend
        with:
          context: .
          push: ${{ github.repository_owner == 'one-zero-eight' && 'true' || 'false' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  backend-deploy:
    # Only on manual trigger or push to main
    if: github.repository_owner == 'one-zero-eight' && (github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    name: "[Backend] Deploy to ${{ github.event.inputs.environment || 'staging' }}"
    needs: backend-build
    runs-on: [self-hosted, innohassle]
    environment:
      # Set the environment name and URL to be displayed in GitHub
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: ${{ vars.BACKEND_DEPLOY_URL }}
    concurrency:
      # Set the concurrency group to prevent multiple deployments at once
      group: ${{ github.event.inputs.environment || 'staging' }}
      cancel-in-progress: false
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.BACKEND_SSH_HOST }}
          username: ${{ secrets.BACKEND_SSH_USERNAME }}
          key: ${{ secrets.BACKEND_SSH_KEY }}
          fingerprint: ${{ secrets.BACKEND_SSH_FINGERPRINT }}
          script_stop: true # Stop script on error
          command_timeout: 30m
          script: |
            cd "${{ secrets.BACKEND_DEPLOY_DIRECTORY }}"
            bash "${{ secrets.BACKEND_DEPLOY_SCRIPT }}" "${{ needs.backend-build.outputs.imageid }}"
